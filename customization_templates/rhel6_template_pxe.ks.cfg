# rhel6_template_pxe.ks.cfg
#
#  Author: Kevin Morey <kevin@redhat.com>
#
#  Description: CloudForms - kickstart script for a RHEL server via PXE.
#  
#  Notes: The evm hash below is the same as $evm.root['miq_provision'].options giving you access to all of the 
#     provisioning options
#
# -------------------------------------------------------------------------------
#    Copyright 2016 Kevin Morey <kevin@redhat.com>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# -------------------------------------------------------------------------------
<%
  # begin setting variables
  debug                   = false
  ws_values               = evm.fetch(:ws_values, {})
  rhel_version            = evm[:rhel_version]
  rhel_version          ||= ws_values[:rhel_version] || '6.5'
  os_ver                  = "RHEL #{rhel_version} Server"
  rhn_activation_key      = evm[:activation_key]
  rhn_activation_key    ||= evm[:ws_values][:activation_key] rescue '2-demo-org-key'
  satellite_server        = 'satellite.example.com'
  repo_source_url         = "http://#{satellite_server}/ks/dist/ks-rhel-x86_64-server-6-"+rhel_version
  satellite_script        = "http://#{satellite_server}/pub/cfme/demo.sh"
  rhev_agent_url          = "http://#{satellite_server}/pub/cfme/ipxe/sources/misc/rhev-agent-2.3.16-3.el6.x86_64.rpm"
  root_fallback_password  = "Redhat1!" # Fallback root password if the dialog was blank
  
  # Account for some missing values
  evm[:root_password]  = root_fallback_password if evm[:root_password].blank?
  evm[:hostname]       = evm[:vm_target_hostname] if evm[:hostname].blank?
  evm[:addr_mode]      = ['dhcp'] if evm[:ip_addr].blank? || evm[:subnet_mask].blank? || evm[:gateway].blank?
  
  # Dynamically create the network string based on values from the dialog
  if evm[:addr_mode].first == 'static'
    network_string = "network --onboot yes --bootproto=static --noipv6"
    ["ip", :ip_addr, "netmask", :subnet_mask, "gateway", :gateway, "hostname", :hostname, "nameserver", :dns_servers].each_slice(2) do |ks_key, evm_key|
      network_string << " --#{ks_key} #{evm[evm_key]}" unless evm[evm_key].blank?
    end
  else
    network_string = "network --onboot yes --bootproto=dhcp --noipv6"
    network_string << " --#{"hostname"} #{evm[:hostname]}" unless evm[:hostname].blank?
  end
  # end setting variables
%>
##### <%= os_ver %> Kickstart file #####


### Install info
install
text
lang en_US.UTF-8
keyboard us
firewall --service=ssh
authconfig --enableshadow --passalgo=sha512
selinux --enforcing
timezone --utc America/New_York
zerombr
poweroff


# Configure Networking based on values from provisioning dialog
<%= network_string %>

rootpw --iscrypted <%= MiqPassword.md5crypt(evm[:root_password]) %>

# Source Files Location
url --url=<%= repo_source_url %>
repo --name="<%= os_ver %>"  --baseurl=<%= repo_source_url %> --cost=100


### Pre Install Scripts
%pre
# Get the first hard disk and use it for installation
hd=/dev/`grep '[hsv]d[a-z]' /proc/partitions |sort |awk 'NR==1{print substr($4,0,4)}'`
echo 'clearpart --all --drives='$hd' --initlabel' >/tmp/partition
echo 'bootloader --location=mbr --driveorder='$hd' --append=" rhgb crashkernel=auto quiet"' >>/tmp/partition
echo 'part /boot --fstype=ext4 --size=500 --asprimary --ondrive='$hd >>/tmp/partition
echo 'part pv.008002 --grow --size=1' >>/tmp/partition
echo 'volgroup vg_rhtest --pesize=4096 pv.008002' >>/tmp/partition
echo 'logvol / --fstype=ext4 --name=lv_root --vgname=vg_rhtest --grow --size=1024 --maxsize=51200' >>/tmp/partition
echo 'logvol swap --fstype=swap --name=lv_swap --vgname=vg_rhtest --grow --size=2016 --maxsize=4032' >>/tmp/partition
%end


### Grab the partitioning information that was written to disk earlier
%include /tmp/partition


### Post Install Scripts
%post --log=/root/ks-post.log

# Register to RHN or Download locally and Install RHEV Agent
<% if rhn_activation_key.blank? %>
  wget <%= rhev_agent_url %>
  rpm -ivh rhev-agent-2.3.16-3.el6.x86_64.rpm
<% else %>
  wget http://satellite.rdu.salab.redhat.com/pub/RHN-ORG-TRUSTED-SSL-CERT -O /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT
  rhnreg_ks --serverUrl=https://satellite.rdu.salab.redhat.com/XMLRPC --sslCACert=/usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT --activationkey=<%= rhn_activation_key %> --force
  yum -y install rhev-agent
<% end %>

# Register to Satellite and install the rhev-agent
#wget -q <%= satellite_script %> -O /tmp/demo.sh
#chmod +x /tmp/demo.sh
#/tmp/demo.sh
#yum -y install rhev-agent


## Install First-Boot Script
echo "#!/bin/bash" > /tmp/miq-firstboot.sh
echo "# Do Stuff Here" >> /tmp/miq-firstboot.sh
echo "# Clean up" >> /tmp/miq-firstboot.sh
echo "cp /etc/rc.local /tmp/miq-rc.local.tmp" >> /tmp/miq-firstboot.sh
echo "head -n -1 /tmp/miq-rc.local.tmp > /etc/rc.local" >> /tmp/miq-firstboot.sh
echo "chmod -x /tmp/miq-*" >> /tmp/miq-firstboot.sh
# Make the script executable
chmod +x /tmp/miq-firstboot.sh
# Install the script to run at boot
echo "/tmp/miq-firstboot.sh" >> /etc/rc.local
## Done Installing MIQ First-Boot Script

# Add a user called admin
groupadd admin
useradd -g admin -c "Admin User" -p '<%= MiqPassword.md5crypt("smartvm") %>' -m admin

# Dump of evm object to ks-post.log if debug is set true
<%= evm.inspect if debug == true %>

# Callback to EVM during post-install
wget --no-check-certificate <%= evm[:callback_url_on_post_install] %>

%end


### Server Packages
%packages
@base
@server-platform
@server-policy
pax
oddjob
sgpio
certmonger
pam_krb5
krb5-workstation
perl-DBD-SQLite
%end


##### Done #####